{"version":3,"file":"static/js/97.fc99e6a6.chunk.js","mappings":"2NA6BA,QAnBA,SAAeA,GAAY,IAAX,KAAEC,GAAMD,EACtB,OACEE,EAAAA,EAAAA,KAACC,EAAAA,EAAmB,CAClBC,MAAM,OACNC,OAAQ,IACRC,UAAW,uBAAuBC,UAElCC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACR,KAAMA,EAAKM,SAAA,EACpBL,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,KAAK,WAAWC,QAAQ,QAAQC,OAAO,aAC7CX,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,KAAK,WAAWC,QAAQ,QAAQC,OAAO,aAC7CX,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACD,OAAO,OAAOE,gBAAgB,WAC7Cb,EAAAA,EAAAA,KAACc,EAAAA,EAAK,CAACJ,QAAQ,QAAQK,QAAS,KAChCf,EAAAA,EAAAA,KAACgB,EAAAA,EAAK,CAACC,QAAS,KAChBjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAO,CAACC,aAAc,CAAEC,gBAAiB,iBAIlD,E,++JCtBA,MAAMC,EAAO,ICLE,MAEbC,WAAAA,CAAYC,EAAKC,GACf,MAAMC,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAII,OAAQD,GAAKF,EAAQ,CAC3C,MAAMI,EAAQL,EAAIM,MAAMH,EAAGA,EAAIF,GAC/BC,EAAOK,KAAKF,EACd,CACA,OAAOH,CACT,CACAM,YAAAA,CAAahC,GACX,MAAM0B,EAAS,CAAC,EAYhB,OAVA1B,EAAKiC,SAASC,IACZ,MAAMC,EAAOD,EAAKE,MAAMC,MAAM,KAAK,GAE9BX,EAAOS,KACVT,EAAOS,GAAQ,IAGjBT,EAAOS,GAAMJ,KAAKG,EAAK,IAGlBI,OAAOC,OAAOb,EACvB,CAEAc,kBAAAA,CAAmBC,GACjB,MAeOL,EAAOM,EAAKP,GAAQM,EAAWJ,MAAM,KAAKM,IAAIC,QAMrD,MAAO,CArBQ,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAKuBR,EAAQ,GACjBM,EACCP,EAGnB,GDbF,QA7BA,WACE,MAAMU,EAAevB,EAAKU,aAAahC,IAChC8C,EAASC,IAAcC,EAAAA,EAAAA,UAAS,GAEvC,OACEzC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBL,EAAAA,EAAAA,KAAA,MAAII,UAAU,iBAAgBC,SAAC,uBAC/BL,EAAAA,EAAAA,KAACgD,EAAM,CAACjD,KAAM6C,EAAaC,MAC3B7C,EAAAA,EAAAA,KAAA,OAAKI,UAAU,UAASC,SACrBuC,EAAaF,KAAI,SAACO,GAAiB,IAAXvB,EAACwB,UAAAvB,OAAA,QAAAwB,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE3B,OACElD,EAAAA,EAAAA,KAAA,UACEI,UAAU,MAEVgD,MAAO,CAACC,OAAO,YACfC,QAASA,KACPR,EAAWpB,EAAE,EACbrB,SAEDgB,EAAKkB,mBAAmBU,EAAK,GAAGd,OAAO,IANnCT,EASX,QAIR,C","sources":["Dashboard/components/Charts.js","Dashboard/pages/Analytics.js","utils/utils.js"],"sourcesContent":["import {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport React from \"react\";\r\nfunction Charts({ data }) {\r\n  return (\r\n    <ResponsiveContainer\r\n      width=\"100%\"\r\n      height={500}\r\n      className={\"line-chart-container\"}\r\n    >\r\n      <LineChart data={data}>\r\n        <Line type=\"monotone\" dataKey=\"users\" stroke=\"#bd8100\" />\r\n        <Line type=\"monotone\" dataKey=\"leads\" stroke=\"#11f2dc\" />\r\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"10 10\" />\r\n        <XAxis dataKey=\"month\" xAxisId={0} />\r\n        <YAxis yAxisId={0} />\r\n        <Tooltip contentStyle={{ backgroundColor: \"#000000\" }} />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import React, { useState } from \"react\";\r\nimport Charts from \"../components/Charts\";\r\nimport data from \"../../data/linechart_data.json\";\r\nimport Utils from \"../../utils/utils\";\r\n\r\nconst util = new Utils();\r\n\r\nfunction Analytics() {\r\n  const dividedArray = util.divideByYear(data);\r\n  const [dataNum, setDataNum] = useState(0);\r\n\r\n  return (\r\n    <div className=\"Analytics\">\r\n      <h1 className=\"title col-rare\">Website analytics</h1>\r\n      <Charts data={dividedArray[dataNum]} />\r\n      <div className=\"periods\">\r\n        {dividedArray.map((elem, i = 0) => {\r\n          \r\n          return (\r\n            <button\r\n              className=\"btn\"\r\n              key={i}\r\n              style={{margin:\"1rem 0px\"}}\r\n              onClick={() => {\r\n                setDataNum(i);\r\n              }}\r\n            >\r\n              {util.convertDateToWords(elem[0].month)[2] }\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analytics;\r\n","export default class Utils {\r\n  // takes and divides the array\r\n  divideArray(arr, divnum) {\r\n    const result = [];\r\n    for (let i = 0; i < arr.length; i += divnum) {\r\n      const chunk = arr.slice(i, i + divnum);\r\n      result.push(chunk);\r\n    }\r\n    return result;\r\n  }\r\n  divideByYear(data) {\r\n    const result = {};\r\n\r\n    data.forEach((item) => {\r\n      const year = item.month.split(\"/\")[2]; // Extract the year from the date\r\n\r\n      if (!result[year]) {\r\n        result[year] = [];\r\n      }\r\n\r\n      result[year].push(item); // Group by year\r\n    });\r\n\r\n    return Object.values(result); // Convert object to 2D array\r\n  }\r\n\r\n  convertDateToWords(dateString) {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    const [month, day, year] = dateString.split(\"/\").map(Number);\r\n\r\n    const monthName = months[month - 1];\r\n    const dayName = day;\r\n    const yearName = year;\r\n\r\n    return [monthName, dayName, yearName];\r\n  }\r\n}\r\n"],"names":["_ref","data","_jsx","ResponsiveContainer","width","height","className","children","_jsxs","LineChart","Line","type","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","xAxisId","YAxis","yAxisId","Tooltip","contentStyle","backgroundColor","util","divideArray","arr","divnum","result","i","length","chunk","slice","push","divideByYear","forEach","item","year","month","split","Object","values","convertDateToWords","dateString","day","map","Number","dividedArray","dataNum","setDataNum","useState","Charts","elem","arguments","undefined","style","margin","onClick"],"sourceRoot":""}